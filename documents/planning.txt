Business Card

-- dimensions
	-- 3.5 x 2 (in) or 89 x 50 (mm)
	-- 1.6 mm thick (stackup of a 1.00mm board and a 0.6 mm board)

-- 10 leds tall (white)

-- uC
	-- Atmega328p
	-- 1.8V - 5.5V operating range
-- 3 axis accelerometer
	-- LIS3DSH
	-- 1.71V - 3.6V
	-- SPI interface (1.6k samples/second)
-- LEDs
	-- white, Rohm Semi SML-P1
	-- consider switch to 0805 instead of 0402's
		-- might be easier to hand solder, but this thing is going to be reflow'd anyway
		-- possibly only consider switch if 0805s are brighter
-- ambient light sensor
	-- LOR-303ALS-01
	-- 2.4V - 3.6V
-- on/off switch
	-- JS Sub-Minature (JS102000SAQN)
-- caps/resistors
	-- 0805 form factor
-- batteries
	-- 2 CR2016 in parallel
	-- according to energizer, 90mAh down to 2.0V
		-- ~180mAh in parallell, should be enough for
		-- two hours or so of constant runtime

-- layout
	-- first iteration is single 1.6mm board
	-- backside is all personal information
	-- other side is components

-- need programming pads for ATMega programmer


-- rev0 notes
	-- battery holder has no silkscreen, I won't be using it in the final design so I won't waste my time on that
	
-- power disspiation
	-- per component
		-- voltage drop resistors - 10 * (5mA * 5mA * 82ohm) = 20.5mW
		-- LEDs - 10 * (5mA * 2.9V) = 145mW
		-- uC - ~3mA * 3.3V = 9.9mW (possibly more or less depending on usage of periperhals)
		-- accelerometer - 225uA * 3.3V = 0.742mW
	-- total power consumption of ~180mW
	-- CR2016s are good for ~112mWh/g @ 1.9g = ~212mWh
	-- using 2 CR2016s means about 420mWh
		-- 420mWh / 180mW = ~ 2.3 hours of use @ 100% efficiency
		-- estimate 1.5 hours of shaking (~75% efficiency), if LEDs are constant on
	-- unfortunately, 180mW @ 3.3V is something like 50mA of draw, with an IR of 15ohms,
	   this is something like 0.45V of drop due to the internal resistance of the cells,
	   so we're counting on the boost regulator to keep up


-- order of business

-- stuff done
	-- new inductor footprints / change out inductor
		-- not needed
	-- accelerometer connections
	-- switch for programming mode (to I/O pin)
	-- light sensor implementation
	-- battery gauge ADC connections
	-- power calculations
	-- uC power/ADC power
	-- programming pad layout (pin headers for rev0)
	-- need to look at ARVISPII pinout
	-- reset connections



------------------------------------------------------------------------------------------

- rev1 updates
	- connect light sensor to +3V3
	- debug header should be array of small pads
	- programming header should be array of small pads
		- where should this be located?
			- only option seems bottom of card
		- what should the pad size be? look up common pogo pin dimensions 
	- should headers be series of small pads?
		- other idea, would be holes through both boards, such that headers are still solderable
		  and I can provide some with the card
		- space them back from the edge of the card so when they are soldered on they don't poke
		  off the edge of the card -- this keeps the card 'shakeable' even after headers are 
		  soldered on
		- consider placing on the bottom, if they can be made to fit
	- momentary pushbutton switch
		- pick off digikey
		- create footprint (+ symbol?)
		- can connect switch to clkout, and still bring clkout to debug header,
		  programming can either output clkout to one side of the switch with no 
		  effect, or the clkout pin can be used as a regular I/O (is it an iterrupt? - no (is that a problem?)

		  sdi
		  sdo
		  sck
		  cs
		  3v3
		  prog_en
		  light_vsense
		  accel_int1
		  accel_int2
		  pic_ext_func
		  v_sw



		  pic_tx
		  pic_rx
		  accel_int1
		  accel_int2
		  light_vsense
		  prog_en
		  pic_ext_func
		  3v3
		  sdi
		  sdo
		  sck
		  cs
		  v_sw
- total current source calculation
	- leds: (10mA IF) * 10 = 100mA
	- accelerometer: 225uA (max, 11uA if low sample rate mode)
	- light sensor: 400uA (max)

- risky idea
	- remove all slide switches
	- why?
		- cleaner design
		- difficult to find such small slide switches
	- how?
		- remove slide switches
		- uC will go into sleep mode, woken up by interrupts driven either by the pushbutton, or an interrupt from the accelerometer
		- boost converter will operate in pass-through mode (controlled by EN pin), and the uC has control over boosting
			- this means that we can experiment with completely eliminating the boost converter and driving the entire board off
			  the batteries directly (the LED current limiting resistors can be replaced with 0ohm resistors for a Vf of ~3V
			  which gives a IF of ~5mA per the datasheet
	- changes made
		- removed switches
		- deleted PROG_EN net into uC
		- moved LIGHT_VSENSE rom RB2 to RB3 (should be fine, both are still ADC pins)
		- put PIC_EXT_FUNC on RB2, since it's an interrupt pin
		- connected RA6 to EXT_POWER
		- als(s) are now powered through EXT_POWER from uC since they draw about 0.5mA a piece (in max illumination) they
		  are potentially a source of large current draw in sleep
		- removed PROG_EN output on debug header and changed to EXT_POWER
		- removed pull-up from PIC_EXT_FUNC button, the internal weak pull-up can be used on RB2
		- added weak pull-down on V_SW so the boost is disabled when V_SW is potentially floating\
		- added a second ALS to use as a clock signal
		- renamed LIGHT_VSENSE to ALS_VSENSE_CLK, second ALS uses ALS_VSENSE_DAT
		- changed EXT_POWER to BOOST_EN, which both ALS are now powered from (ALS is only powered when boost is enabled)
			- this keeps power consumption low in sleep (only uC and accelerometer are sipping current, about 100nA and 11uA respectively,
			  meaning the card should last in sleep mode for about two years)
		- 
- other ideas
	- add a second ALS for a clock signal

sdo,
